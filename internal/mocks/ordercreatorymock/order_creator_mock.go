// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/interfaces/usecases/ordercreator/order_creator.go

// Package ordercreatorymock is a generated GoMock package.
package ordercreatorymock

import (
	context "context"
	reflect "reflect"

	entities "github.com/Pos-Tech-Challenge-48/delivery-order-api/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockOrderCreator is a mock of OrderCreator interface.
type MockOrderCreator struct {
	ctrl     *gomock.Controller
	recorder *MockOrderCreatorMockRecorder
}

// MockOrderCreatorMockRecorder is the mock recorder for MockOrderCreator.
type MockOrderCreatorMockRecorder struct {
	mock *MockOrderCreator
}

// NewMockOrderCreator creates a new mock instance.
func NewMockOrderCreator(ctrl *gomock.Controller) *MockOrderCreator {
	mock := &MockOrderCreator{ctrl: ctrl}
	mock.recorder = &MockOrderCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderCreator) EXPECT() *MockOrderCreatorMockRecorder {
	return m.recorder
}

// CreateOrderAndEnqueuePayment mocks base method.
func (m *MockOrderCreator) CreateOrderAndEnqueuePayment(ctx context.Context, order *entities.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderAndEnqueuePayment", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrderAndEnqueuePayment indicates an expected call of CreateOrderAndEnqueuePayment.
func (mr *MockOrderCreatorMockRecorder) CreateOrderAndEnqueuePayment(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderAndEnqueuePayment", reflect.TypeOf((*MockOrderCreator)(nil).CreateOrderAndEnqueuePayment), ctx, order)
}
