// Code generated by MockGen. DO NOT EDIT.
// Source: ./customer_creator.go
//
// Generated by this command:
//
//	mockgen -destination=./../../../mocks/customercreatorymock/customer_creator_mock.go -source=./customer_creator.go -package=customercreatorymock
//
// Package customercreatorymock is a generated GoMock package.
package customercreatorymock

import (
	context "context"
	reflect "reflect"

	"github.com/Pos-Tech-Challenge-48/delivery-order-api/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockCustomerCreator is a mock of CustomerCreator interface.
type MockCustomerCreator struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerCreatorMockRecorder
}

// MockCustomerCreatorMockRecorder is the mock recorder for MockCustomerCreator.
type MockCustomerCreatorMockRecorder struct {
	mock *MockCustomerCreator
}

// NewMockCustomerCreator creates a new mock instance.
func NewMockCustomerCreator(ctrl *gomock.Controller) *MockCustomerCreator {
	mock := &MockCustomerCreator{ctrl: ctrl}
	mock.recorder = &MockCustomerCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerCreator) EXPECT() *MockCustomerCreatorMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCustomerCreator) Create(ctx context.Context, user *entities.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCustomerCreatorMockRecorder) Create(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCustomerCreator)(nil).Create), ctx, user)
}
