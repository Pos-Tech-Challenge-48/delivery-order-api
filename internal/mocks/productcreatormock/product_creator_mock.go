// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/interfaces/usecases/productcreator/product_creator.go

// Package productcreatormock is a generated GoMock package.
package productcreatormock

import (
	context "context"
	reflect "reflect"

	entities "github.com/Pos-Tech-Challenge-48/delivery-order-api/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockProductCreator is a mock of ProductCreator interface.
type MockProductCreator struct {
	ctrl     *gomock.Controller
	recorder *MockProductCreatorMockRecorder
}

// MockProductCreatorMockRecorder is the mock recorder for MockProductCreator.
type MockProductCreatorMockRecorder struct {
	mock *MockProductCreator
}

// NewMockProductCreator creates a new mock instance.
func NewMockProductCreator(ctrl *gomock.Controller) *MockProductCreator {
	mock := &MockProductCreator{ctrl: ctrl}
	mock.recorder = &MockProductCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductCreator) EXPECT() *MockProductCreatorMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockProductCreator) Add(ctx context.Context, product *entities.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, product)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockProductCreatorMockRecorder) Add(ctx, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockProductCreator)(nil).Add), ctx, product)
}
