// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/interfaces/usecases/orderupdater/order_updater.go

// Package orderupdatermock is a generated GoMock package.
package orderupdatermock

import (
	context "context"
	reflect "reflect"

	entities "github.com/Pos-Tech-Challenge-48/delivery-order-api/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockOrderUpdater is a mock of OrderUpdater interface.
type MockOrderUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockOrderUpdaterMockRecorder
}

// MockOrderUpdaterMockRecorder is the mock recorder for MockOrderUpdater.
type MockOrderUpdaterMockRecorder struct {
	mock *MockOrderUpdater
}

// NewMockOrderUpdater creates a new mock instance.
func NewMockOrderUpdater(ctrl *gomock.Controller) *MockOrderUpdater {
	mock := &MockOrderUpdater{ctrl: ctrl}
	mock.recorder = &MockOrderUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderUpdater) EXPECT() *MockOrderUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockOrderUpdater) Update(ctx context.Context, order *entities.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockOrderUpdaterMockRecorder) Update(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOrderUpdater)(nil).Update), ctx, order)
}
