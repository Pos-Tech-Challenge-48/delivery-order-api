// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/interfaces/repositories/order.go

// Package orderrepositorymock is a generated GoMock package.
package orderrepositorymock

import (
	context "context"
	reflect "reflect"

	entities "github.com/Pos-Tech-Challenge-48/delivery-order-api/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockOrderRepository is a mock of OrderRepository interface.
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository.
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance.
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockOrderRepository) GetAll(ctx context.Context) ([]entities.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]entities.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockOrderRepositoryMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockOrderRepository)(nil).GetAll), ctx)
}

// GetAllSortedByStatus mocks base method.
func (m *MockOrderRepository) GetAllSortedByStatus(ctx context.Context) ([]entities.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSortedByStatus", ctx)
	ret0, _ := ret[0].([]entities.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSortedByStatus indicates an expected call of GetAllSortedByStatus.
func (mr *MockOrderRepositoryMockRecorder) GetAllSortedByStatus(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSortedByStatus", reflect.TypeOf((*MockOrderRepository)(nil).GetAllSortedByStatus), ctx)
}

// GetByID mocks base method.
func (m *MockOrderRepository) GetByID(ctx context.Context, orderID string) (*entities.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, orderID)
	ret0, _ := ret[0].(*entities.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockOrderRepositoryMockRecorder) GetByID(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockOrderRepository)(nil).GetByID), ctx, orderID)
}

// Save mocks base method.
func (m *MockOrderRepository) Save(ctx context.Context, order *entities.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockOrderRepositoryMockRecorder) Save(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockOrderRepository)(nil).Save), ctx, order)
}

// Update mocks base method.
func (m *MockOrderRepository) Update(ctx context.Context, order *entities.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockOrderRepositoryMockRecorder) Update(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOrderRepository)(nil).Update), ctx, order)
}

// MockOrderQueueRepository is a mock of OrderQueueRepository interface.
type MockOrderQueueRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderQueueRepositoryMockRecorder
}

// MockOrderQueueRepositoryMockRecorder is the mock recorder for MockOrderQueueRepository.
type MockOrderQueueRepositoryMockRecorder struct {
	mock *MockOrderQueueRepository
}

// NewMockOrderQueueRepository creates a new mock instance.
func NewMockOrderQueueRepository(ctrl *gomock.Controller) *MockOrderQueueRepository {
	mock := &MockOrderQueueRepository{ctrl: ctrl}
	mock.recorder = &MockOrderQueueRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderQueueRepository) EXPECT() *MockOrderQueueRepositoryMockRecorder {
	return m.recorder
}

// SendPendingPaymentOrderMessageToQueue mocks base method.
func (m *MockOrderQueueRepository) SendPendingPaymentOrderMessageToQueue(ctx context.Context, order *entities.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPendingPaymentOrderMessageToQueue", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendPendingPaymentOrderMessageToQueue indicates an expected call of SendPendingPaymentOrderMessageToQueue.
func (mr *MockOrderQueueRepositoryMockRecorder) SendPendingPaymentOrderMessageToQueue(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPendingPaymentOrderMessageToQueue", reflect.TypeOf((*MockOrderQueueRepository)(nil).SendPendingPaymentOrderMessageToQueue), ctx, order)
}
